#include<iostream>
#include<stack>
#include<vector>
#include<omp.h>
using namespace std;
const int max=100000;
vector<int>graph[max];
bool visited[max];
void bfs(int start){
stack<int>s;
s.push(start);
while(!s.empty()){
int vertex=s.top();
if(!visited[vertex]){
s.pop();
cout<<vertex<<" ";
#pragma omp parallel for
for(int i=0; i<graph[vertex].size();i++){
int neighbour=graph[vertex][i];
if(!visited[neighbour]){
s.push(neighbour);
}
}
}
}
}
int main() { 
int n, m, start_node; 
cout<<"Enter no. of Node,no. of Edges and Starting Node of graph:\n"; 
cin >> n >> m >> start_node;
cout<<"Enter pair of node and edges:\n"; 
for (int i = 0; i < m; i++) {
int u, v;
cin >> u >> v;
graph[u].push_back(v);
graph[v].push_back(u);
}
#pragma omp parallel for
 for (int i= 0; i < n; i++) { 
    visited[i] = false;
}
dfs(start_node);
return 0;
} 